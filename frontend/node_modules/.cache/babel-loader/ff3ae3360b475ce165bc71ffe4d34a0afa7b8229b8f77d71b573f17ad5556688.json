{"ast":null,"code":"import * as yup from 'yup';\n\n/**\n * Formata um número de telefone para o formato (XX)XXXXX-XXXX celular ou (XX)XXXX-XXXX fixo.\n *\n * @param telefone O número de telefone a ser formatado.\n * @returns O número de telefone formatado.\n */\nexport function formatarTelefone(telefone) {\n  // Remove tudo o que não é dígito\n  let numeros = telefone.replace(/\\D/g, '');\n\n  // Verifica se o número tem mais de 2 dígitos\n  if (numeros.length > 2) {\n    // Insere os parênteses nos dois primeiros dígitos\n    numeros = '(' + numeros.substring(0, 2) + ')' + numeros.substring(2);\n  }\n\n  // Verifica se o número tem mais de 6 dígitos\n  if (numeros.length > 6) {\n    // Insere o hífen antes dos últimos 4 dígitos\n    numeros = numeros.substring(0, numeros.length - 4) + '-' + numeros.substring(numeros.length - 4);\n  }\n  return numeros;\n}\n\n// Esquema de validação\nexport const schema = yup.object().shape({\n  nome: yup.string().min(3, 'Nome inválido').matches(/^[a-zA-ZÀ-ú\\s]+$/, 'Nome inválido'),\n  email: yup.string().email('E-mail inválido'),\n  cpf: yup.string().matches(/^\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2}$/, 'CPF inválido'),\n  telefone: yup.string().matches(/^\\(\\d{2}\\)\\d{4,5}-\\d{4}$/, 'Telefone inválido'),\n  status: yup.string().required('Status é obrigatório')\n});","map":{"version":3,"names":["yup","formatarTelefone","telefone","numeros","replace","length","substring","schema","object","shape","nome","string","min","matches","email","cpf","status","required"],"sources":["/app-frontend/src/services/schema.ts"],"sourcesContent":["import * as yup from 'yup'\n\n/**\n * Formata um número de telefone para o formato (XX)XXXXX-XXXX celular ou (XX)XXXX-XXXX fixo.\n *\n * @param telefone O número de telefone a ser formatado.\n * @returns O número de telefone formatado.\n */\nexport function formatarTelefone (telefone: string): string {\n  // Remove tudo o que não é dígito\n  let numeros: string = telefone.replace(/\\D/g, '')\n\n  // Verifica se o número tem mais de 2 dígitos\n  if (numeros.length > 2) {\n    // Insere os parênteses nos dois primeiros dígitos\n    numeros = '(' + numeros.substring(0, 2) + ')' + numeros.substring(2)\n  }\n\n  // Verifica se o número tem mais de 6 dígitos\n  if (numeros.length > 6) {\n    // Insere o hífen antes dos últimos 4 dígitos\n    numeros = numeros.substring(0, numeros.length - 4) + '-' + numeros.substring(numeros.length - 4)\n  }\n\n  return numeros\n}\n\n// Esquema de validação\nexport const schema = yup.object().shape({\n  nome: yup.string().min(3, 'Nome inválido').matches(/^[a-zA-ZÀ-ú\\s]+$/, 'Nome inválido'),\n  email: yup.string().email('E-mail inválido'),\n  cpf: yup.string().matches(/^\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2}$/, 'CPF inválido'),\n  telefone: yup.string().matches(/^\\(\\d{2}\\)\\d{4,5}-\\d{4}$/, 'Telefone inválido'),\n  status: yup.string().required('Status é obrigatório')\n})\n"],"mappings":"AAAA,OAAO,KAAKA,GAAG,MAAM,KAAK;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,gBAAgBA,CAAEC,QAAgB,EAAU;EAC1D;EACA,IAAIC,OAAe,GAAGD,QAAQ,CAACE,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;;EAEjD;EACA,IAAID,OAAO,CAACE,MAAM,GAAG,CAAC,EAAE;IACtB;IACAF,OAAO,GAAG,GAAG,GAAGA,OAAO,CAACG,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,GAAG,GAAGH,OAAO,CAACG,SAAS,CAAC,CAAC,CAAC;EACtE;;EAEA;EACA,IAAIH,OAAO,CAACE,MAAM,GAAG,CAAC,EAAE;IACtB;IACAF,OAAO,GAAGA,OAAO,CAACG,SAAS,CAAC,CAAC,EAAEH,OAAO,CAACE,MAAM,GAAG,CAAC,CAAC,GAAG,GAAG,GAAGF,OAAO,CAACG,SAAS,CAACH,OAAO,CAACE,MAAM,GAAG,CAAC,CAAC;EAClG;EAEA,OAAOF,OAAO;AAChB;;AAEA;AACA,OAAO,MAAMI,MAAM,GAAGP,GAAG,CAACQ,MAAM,CAAC,CAAC,CAACC,KAAK,CAAC;EACvCC,IAAI,EAAEV,GAAG,CAACW,MAAM,CAAC,CAAC,CAACC,GAAG,CAAC,CAAC,EAAE,eAAe,CAAC,CAACC,OAAO,CAAC,kBAAkB,EAAE,eAAe,CAAC;EACvFC,KAAK,EAAEd,GAAG,CAACW,MAAM,CAAC,CAAC,CAACG,KAAK,CAAC,iBAAiB,CAAC;EAC5CC,GAAG,EAAEf,GAAG,CAACW,MAAM,CAAC,CAAC,CAACE,OAAO,CAAC,6BAA6B,EAAE,cAAc,CAAC;EACxEX,QAAQ,EAAEF,GAAG,CAACW,MAAM,CAAC,CAAC,CAACE,OAAO,CAAC,0BAA0B,EAAE,mBAAmB,CAAC;EAC/EG,MAAM,EAAEhB,GAAG,CAACW,MAAM,CAAC,CAAC,CAACM,QAAQ,CAAC,sBAAsB;AACtD,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}