{"ast":null,"code":"var _jsxFileName = \"/home/acmarchiori/Desafios-Tecnicos/desafio-tecnico-uol/test-fullstack/frontend/src/context/UserContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext } from 'react';\n\n// Definição do tipo para um cliente\n\n// Definição do tipo para o contexto de cliente\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Inicialização do contexto\nconst ClientContext = /*#__PURE__*/createContext(undefined);\n\n/**\n * Provedor de contexto para gerenciar informações de clientes.\n *\n * Este provedor fornece um contexto que pode ser utilizado para acessar e modificar\n * a lista de clientes na aplicação.\n */\nconst ClientProvider = ({\n  children\n}) => {\n  _s();\n  const [clients, setClients] = useState([]);\n\n  // Função para atualizar a lista de clientes\n  const updateClientList = newClients => {\n    setClients(newClients);\n  };\n  return /*#__PURE__*/_jsxDEV(ClientContext.Provider, {\n    value: {\n      clients,\n      updateClientList\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n\n/**\n * Hook personalizado para acessar o contexto de cliente.\n *\n * Este hook retorna o contexto de cliente, permitindo que os componentes\n * da aplicação acessem e atualizem as informações de clientes.\n */\n_s(ClientProvider, \"hlxqBwWcTyhaGlUbDOHKVgNxwg0=\");\n_c = ClientProvider;\nconst useClientContext = () => {\n  _s2();\n  const context = useContext(ClientContext);\n  if (context === null || context === undefined) {\n    throw new Error('useClientContext deve ser usado dentro de um ClientProvider');\n  }\n  return context;\n};\n_s2(useClientContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport { ClientProvider, useClientContext };\nvar _c;\n$RefreshReg$(_c, \"ClientProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","jsxDEV","_jsxDEV","ClientContext","undefined","ClientProvider","children","_s","clients","setClients","updateClientList","newClients","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useClientContext","_s2","context","Error","$RefreshReg$"],"sources":["/home/acmarchiori/Desafios-Tecnicos/desafio-tecnico-uol/test-fullstack/frontend/src/context/UserContext.tsx"],"sourcesContent":["import React, { createContext, useState, useContext } from 'react'\n\n// Definição do tipo para um cliente\ninterface Client {\n  id?: number\n  name: string\n  email: string\n  cpf: string\n  telefone: string\n  status: string\n}\n\n// Definição do tipo para o contexto de cliente\ninterface ClientContextType {\n  clients: Client[]\n  updateClientList: (newClients: Client[]) => void\n}\n\n// Inicialização do contexto\nconst ClientContext = createContext<ClientContextType | undefined>(undefined)\n\n/**\n * Provedor de contexto para gerenciar informações de clientes.\n *\n * Este provedor fornece um contexto que pode ser utilizado para acessar e modificar\n * a lista de clientes na aplicação.\n */\nconst ClientProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [clients, setClients] = useState<Client[]>([])\n\n  // Função para atualizar a lista de clientes\n  const updateClientList = (newClients: Client[]): void => {\n    setClients(newClients)\n  }\n\n  return (\n    <ClientContext.Provider value={{ clients, updateClientList }}>\n      {children}\n    </ClientContext.Provider>\n  )\n}\n\n/**\n * Hook personalizado para acessar o contexto de cliente.\n *\n * Este hook retorna o contexto de cliente, permitindo que os componentes\n * da aplicação acessem e atualizem as informações de clientes.\n */\nconst useClientContext = (): ClientContextType => {\n  const context = useContext(ClientContext)\n  if (context === null || context === undefined) {\n    throw new Error('useClientContext deve ser usado dentro de um ClientProvider')\n  }\n  return context\n}\n\nexport { ClientProvider, useClientContext }\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;;AAElE;;AAUA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAMA;AACA,MAAMC,aAAa,gBAAGL,aAAa,CAAgCM,SAAS,CAAC;;AAE7E;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,cAAuD,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAChF,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAW,EAAE,CAAC;;EAEpD;EACA,MAAMW,gBAAgB,GAAIC,UAAoB,IAAW;IACvDF,UAAU,CAACE,UAAU,CAAC;EACxB,CAAC;EAED,oBACET,OAAA,CAACC,aAAa,CAACS,QAAQ;IAACC,KAAK,EAAE;MAAEL,OAAO;MAAEE;IAAiB,CAAE;IAAAJ,QAAA,EAC1DA;EAAQ;IAAAQ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACa,CAAC;AAE7B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AALAV,EAAA,CAfMF,cAAuD;AAAAa,EAAA,GAAvDb,cAAuD;AAqB7D,MAAMc,gBAAgB,GAAGA,CAAA,KAAyB;EAAAC,GAAA;EAChD,MAAMC,OAAO,GAAGrB,UAAU,CAACG,aAAa,CAAC;EACzC,IAAIkB,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAKjB,SAAS,EAAE;IAC7C,MAAM,IAAIkB,KAAK,CAAC,6DAA6D,CAAC;EAChF;EACA,OAAOD,OAAO;AAChB,CAAC;AAAAD,GAAA,CANKD,gBAAgB;AAQtB,SAASd,cAAc,EAAEc,gBAAgB;AAAE,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}