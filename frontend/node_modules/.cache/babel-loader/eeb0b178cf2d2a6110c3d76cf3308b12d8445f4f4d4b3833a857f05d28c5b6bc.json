{"ast":null,"code":"import axios from 'axios';\nimport { LOCAL_API_URL } from './types';\n\n// Configuração da instância do axios para realizar requisições à API\nconst apiLocal = axios.create({\n  baseURL: LOCAL_API_URL\n});\n\n/**\n * Função genérica para realizar uma requisição à API.\n *\n * @param method Método da requisição (GET, POST, PUT, DELETE).\n * @param url URL da requisição.\n * @param data Os dados a serem enviados para a API (opcional).\n * @returns Uma Promise que resolve com os dados da resposta.\n */\nasync function requestToAPI(method, url, data) {\n  try {\n    let response;\n    switch (method) {\n      case 'get':\n        response = await apiLocal.get(url);\n        break;\n      case 'post':\n        response = await apiLocal.post(url, data);\n        break;\n      case 'put':\n        response = await apiLocal.put(url, data);\n        break;\n      case 'delete':\n        response = await apiLocal.delete(url);\n        break;\n      default:\n        throw new Error('Invalid HTTP method');\n    }\n    return response.data;\n  } catch (error) {\n    console.error(`Error in ${method.toUpperCase()} request to local server (${url}):`, error);\n    throw error;\n  }\n}\n\n/**\n * Função para obter todos os clientes da API.\n *\n * @returns Uma Promise que resolve com um array de clientes.\n */\nexport const getAllClients = async () => {\n  return await requestToAPI('get', '/clientes');\n};\n\n/**\n * Função para criar um novo cliente na API.\n *\n * @param clientData Os dados do cliente a serem enviados para a API.\n * @returns Uma Promise que resolve quando a requisição é bem-sucedida.\n */\nexport const createClient = async clientData => {\n  await requestToAPI('post', '/clientes', clientData);\n};\n\n/**\n * Função para atualizar um cliente existente na API.\n *\n * @param clientId O ID do cliente a ser atualizado.\n * @param clientData Os novos dados do cliente.\n * @returns Uma Promise que resolve quando a requisição é bem-sucedida.\n */\nexport const updateClient = async (clientId, clientData) => {\n  await requestToAPI('put', `/clientes/${clientId}`, clientData);\n};\n\n/**\n * Função para obter um cliente específico da API pelo seu ID.\n *\n * @param clientId O ID do cliente a ser obtido.\n * @returns Uma Promise que resolve com os dados do cliente.\n */\nexport const getClientById = async clientId => {\n  return await requestToAPI('get', `/clientes/${clientId}`);\n};","map":{"version":3,"names":["axios","LOCAL_API_URL","apiLocal","create","baseURL","requestToAPI","method","url","data","response","get","post","put","delete","Error","error","console","toUpperCase","getAllClients","createClient","clientData","updateClient","clientId","getClientById"],"sources":["/home/acmarchiori/Desafios-Tecnicos/desafio-tecnico-uol/test-fullstack/frontend/src/services/api.ts"],"sourcesContent":["import axios, { AxiosResponse } from 'axios'\nimport { Client, ApiURL, LOCAL_API_URL } from './types'\n\n// Configuração da instância do axios para realizar requisições à API\nconst apiLocal = axios.create({ baseURL: LOCAL_API_URL })\n\n/**\n * Função genérica para realizar uma requisição à API.\n *\n * @param method Método da requisição (GET, POST, PUT, DELETE).\n * @param url URL da requisição.\n * @param data Os dados a serem enviados para a API (opcional).\n * @returns Uma Promise que resolve com os dados da resposta.\n */\nasync function requestToAPI<T> (method: 'get' | 'post' | 'put' | 'delete', url: ApiURL, data?: T): Promise<T> {\n  try {\n    let response: AxiosResponse<T>\n\n    switch (method) {\n      case 'get':\n        response = await apiLocal.get<T>(url)\n        break\n      case 'post':\n        response = await apiLocal.post<T>(url, data)\n        break\n      case 'put':\n        response = await apiLocal.put<T>(url, data)\n        break\n      case 'delete':\n        response = await apiLocal.delete<T>(url)\n        break\n      default:\n        throw new Error('Invalid HTTP method')\n    }\n\n    return response.data\n  } catch (error) {\n    console.error(`Error in ${method.toUpperCase()} request to local server (${url}):`, error)\n    throw error\n  }\n}\n\n/**\n * Função para obter todos os clientes da API.\n *\n * @returns Uma Promise que resolve com um array de clientes.\n */\nexport const getAllClients = async (): Promise<Client[]> => {\n  return await requestToAPI<Client[]>('get', '/clientes')\n}\n\n/**\n * Função para criar um novo cliente na API.\n *\n * @param clientData Os dados do cliente a serem enviados para a API.\n * @returns Uma Promise que resolve quando a requisição é bem-sucedida.\n */\nexport const createClient = async (clientData: Client): Promise<void> => {\n  await requestToAPI<Client>('post', '/clientes', clientData)\n}\n\n/**\n * Função para atualizar um cliente existente na API.\n *\n * @param clientId O ID do cliente a ser atualizado.\n * @param clientData Os novos dados do cliente.\n * @returns Uma Promise que resolve quando a requisição é bem-sucedida.\n */\nexport const updateClient = async (clientId: number, clientData: Client): Promise<void> => {\n  await requestToAPI<Client>('put', `/clientes/${clientId}`, clientData)\n}\n\n/**\n * Função para obter um cliente específico da API pelo seu ID.\n *\n * @param clientId O ID do cliente a ser obtido.\n * @returns Uma Promise que resolve com os dados do cliente.\n */\nexport const getClientById = async (clientId: number): Promise<Client> => {\n  return await requestToAPI<Client>('get', `/clientes/${clientId}`)\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAyB,OAAO;AAC5C,SAAyBC,aAAa,QAAQ,SAAS;;AAEvD;AACA,MAAMC,QAAQ,GAAGF,KAAK,CAACG,MAAM,CAAC;EAAEC,OAAO,EAAEH;AAAc,CAAC,CAAC;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeI,YAAYA,CAAKC,MAAyC,EAAEC,GAAW,EAAEC,IAAQ,EAAc;EAC5G,IAAI;IACF,IAAIC,QAA0B;IAE9B,QAAQH,MAAM;MACZ,KAAK,KAAK;QACRG,QAAQ,GAAG,MAAMP,QAAQ,CAACQ,GAAG,CAAIH,GAAG,CAAC;QACrC;MACF,KAAK,MAAM;QACTE,QAAQ,GAAG,MAAMP,QAAQ,CAACS,IAAI,CAAIJ,GAAG,EAAEC,IAAI,CAAC;QAC5C;MACF,KAAK,KAAK;QACRC,QAAQ,GAAG,MAAMP,QAAQ,CAACU,GAAG,CAAIL,GAAG,EAAEC,IAAI,CAAC;QAC3C;MACF,KAAK,QAAQ;QACXC,QAAQ,GAAG,MAAMP,QAAQ,CAACW,MAAM,CAAIN,GAAG,CAAC;QACxC;MACF;QACE,MAAM,IAAIO,KAAK,CAAC,qBAAqB,CAAC;IAC1C;IAEA,OAAOL,QAAQ,CAACD,IAAI;EACtB,CAAC,CAAC,OAAOO,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAE,YAAWT,MAAM,CAACW,WAAW,CAAC,CAAE,6BAA4BV,GAAI,IAAG,EAAEQ,KAAK,CAAC;IAC1F,MAAMA,KAAK;EACb;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMG,aAAa,GAAG,MAAAA,CAAA,KAA+B;EAC1D,OAAO,MAAMb,YAAY,CAAW,KAAK,EAAE,WAAW,CAAC;AACzD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMc,YAAY,GAAG,MAAOC,UAAkB,IAAoB;EACvE,MAAMf,YAAY,CAAS,MAAM,EAAE,WAAW,EAAEe,UAAU,CAAC;AAC7D,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAAOC,QAAgB,EAAEF,UAAkB,KAAoB;EACzF,MAAMf,YAAY,CAAS,KAAK,EAAG,aAAYiB,QAAS,EAAC,EAAEF,UAAU,CAAC;AACxE,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMG,aAAa,GAAG,MAAOD,QAAgB,IAAsB;EACxE,OAAO,MAAMjB,YAAY,CAAS,KAAK,EAAG,aAAYiB,QAAS,EAAC,CAAC;AACnE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}